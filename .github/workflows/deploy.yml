name: Deploy to Windows Host

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Docker access
      run: |
        echo "Checking Docker access..."
        docker --version
        docker info
      shell: powershell
      
    - name: Show current directory and files
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Get-ChildItem
      shell: powershell
      
    - name: Ensure environment file exists
      run: |
        if (-not (Test-Path ".env")) {
          @"
POSTGRES_DB=clinic_db
POSTGRES_USER=clinic_user
POSTGRES_PASSWORD=clinic_password
DB_HOST=postgres
DB_PORT=5432
"@ | Out-File -FilePath ".env" -Encoding UTF8
          Write-Host ".env file created"
        } else {
          Write-Host ".env file already exists"
          Get-Content ".env"
        }
      shell: powershell
      
    - name: Stop existing containers
      run: |
        docker-compose down 2>$null
        if ($LASTEXITCODE -ne 0) { Write-Host "No containers to stop" }
      shell: powershell
      continue-on-error: true
      
    - name: Remove dangling images
      run: |
        docker image prune -f
      shell: powershell
      continue-on-error: true
      
    - name: Build and start services
      run: |
        Write-Host "Building and starting services..."
        docker-compose up -d --build
        if ($LASTEXITCODE -eq 0) {
          Write-Host "Services started successfully"
        } else {
          Write-Host "Error starting services"
          exit 1
        }
      shell: powershell
      
    - name: Wait for services to initialize
      run: |
        Write-Host "Waiting 45 seconds for services to initialize..."
        Start-Sleep -Seconds 45
      shell: powershell
      
    - name: Show detailed container status
      run: |
        Write-Host "=== Container Status ==="
        docker ps -a
        Write-Host "`n=== Docker Compose Status ==="
        docker-compose ps
        Write-Host "`n=== Recent Container Logs ==="
        docker-compose logs --tail=30
      shell: powershell
      
    - name: Test API endpoints
      run: |
        Write-Host "Testing API endpoints..."
        
        try {
          Write-Host "Testing registratura service..."
          $response1 = Invoke-WebRequest -Uri "http://localhost:5001/patients" -Method GET -TimeoutSec 10
          Write-Host "Registratura status: $($response1.StatusCode)"
        } catch {
          Write-Host "Registratura service not ready: $($_.Exception.Message)"
        }
        
        try {
          Write-Host "Testing schedule service..."
          $response2 = Invoke-WebRequest -Uri "http://localhost:5002/doctors" -Method GET -TimeoutSec 10
          Write-Host "Schedule status: $($response2.StatusCode)"
        } catch {
          Write-Host "Schedule service not ready: $($_.Exception.Message)"
        }
      shell: powershell
      continue-on-error: true
